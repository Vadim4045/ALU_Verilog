module BIN_to_BCD #(parameter BITS=16,DIGITS = 5)
						(input[BITS-1:0] BIN_IN,
						 output [7:0] hex0,hex1,hex2,hex3,hex4,hex5);


 
wire [3:0] sign;  
wire [2*BITS-4:0][DIGITS*4-1:0] result;
wire [DIGITS*4-1:0]BCD; 	
	
genvar i,j;

generate
	
	assign result[0] = 'h0;

	for(i=0;i<2*BITS-2;i=i+2) begin: first_loop
	
		assign result[i+1] = {result[i][BITS-2:0], BIN_IN[BITS-1-i]};
		
		for(j=0;j<DIGITS;j=j+1) begin:second_loop
		
			if(j<=i/2) ADD3 (.in(result[i+1][(j+1)*4-1:j*4]), .out(result[i+2][(j+1)*4-1:j*4]));
			else assign result[i+2][(j+1)*4-1:j*4] = result[i+1][(j+1)*4-1:j*4];
			
		end
		
		
		
	end
	
	assign BCD = {result[i+2][BITS-2:0], BIN_IN[0]};

	assign sign = BIN_IN[BITS-1]? 4'hA:4'hC;
	
endgenerate
	

	SEVEN_SEG(.in(sign), .seg(hex5[6:0]));
	SEVEN_SEG(.in(BCD[3:0]), .seg(hex0[6:0]));
	SEVEN_SEG(.in(BCD[7:4]), .seg(hex1[6:0]));
	SEVEN_SEG(.in(BCD[11:8]), .seg(hex2[6:0]));
	SEVEN_SEG(.in(BCD[15:12]), .seg(hex3[6:0]));
	SEVEN_SEG(.in(BCD[19:16]), .seg(hex4[6:0]));
	
	
endmodule

