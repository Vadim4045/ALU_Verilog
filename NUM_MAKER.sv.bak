module NUM_MAKER #(parameter BITS = 4, DIGITS = 4)
						(input [DIGITS:0] SW,
						input RST,SET,
						output [BITS-1:0] OUT);
						
reg [BITS-1:0] to_add;
reg [BITS-1:0] num;

wire [BITS-1:0]from_add;
wire [DIGITS-1:0][BITS-1:0] ranges;

assign OUT = num;

assign ranges[0] = 'd1;
assign ranges[1] = 'd10;

genvar i;
generate	
					
	for(i=2;i<DIGITS-1;i=i+1) begin: first_loop
		
		MULT10 #(.BITS(BITS))(.IN(ranges[i-1], .OUT(ranges[i]));
		
	end
	
	ADDER_LL_CLA #(.BITS(BITS))(.A(num), .B(to_add), .S(from_add));
	
	for(i=0;i<DIGITS;i=i+1) begin: second_loop
		always @(negedge RST or negedge SET)
		begin
			if(~RST) num<='h0;
			else begin
				if(SW[i]) begin
					
					to_add = ranges[i];
					
					num<=from_add;
					
				end
			end
		end
	end
						
endgenerate			
endmodule
