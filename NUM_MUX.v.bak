module NUM_MUX #(parameter BITS = 16)
					 (input [1:0]SW;
					  input SET,RESET,
					  input [BITS-1:0] A,B,FROM_SET,
					  output reg [BITS-1:0] TO_A,TO_B,TO_SET,
					  output reg SET_A,SET_B,RESET_A,RESET_B);
					  
always @(SW)
case (SW)
	2'b00:
	begin
		assign TO_SET = A;
		assign TO_A = FROM_SET;
		assign TO_B = B;
		assign SET_A = SET;
		assign SET_B = 1'b1;
		assign RESET_A = RESET;
		assign RESET_B = 1'b1;
	end
	
	2'b01:
	begin
		assign TO_SET = B;
		assign TO_A = A;
		assign TO_B = FROM_SET;
		assign SET_A = 1'b1;
		assign SET_B = SET;
		assign RESET_A = 1'b1;
		assign RESET_B = RESET;
	end

	default:
	begin
		assign TO_SET = 'h0;
		assign TO_A = A;
		assign TO_B = B;
		assign SET_A = 1'b1;
		assign SET_B = 1'b1;
		assign RESET_A = 1'b1;
		assign RESET_B = 1'b1;
	end
endcase					  
					  
endmodule

					  
					  
					  
