// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/22/2022 21:47:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          BIN_to_BCD
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BIN_to_BCD_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] BIN_IN;
// wires                                               
wire [23:0] BCD;

// assign statements (if any)                          
BIN_to_BCD i1 (
// port map - connection between master ports and signals/registers   
	.BCD(BCD),
	.BIN_IN(BIN_IN)
);
initial 
begin 
#1000000 $finish;
end 
// BIN_IN[ 15 ]
initial
begin
	BIN_IN[15] = 1'b0;
end 
// BIN_IN[ 14 ]
initial
begin
	BIN_IN[14] = 1'b0;
	BIN_IN[14] = #900000 1'b1;
end 
// BIN_IN[ 13 ]
initial
begin
	BIN_IN[13] = 1'b0;
	BIN_IN[13] = #440000 1'b1;
	BIN_IN[13] = #460000 1'b0;
end 
// BIN_IN[ 12 ]
initial
begin
	BIN_IN[12] = 1'b0;
	BIN_IN[12] = #210000 1'b1;
	BIN_IN[12] = #230000 1'b0;
	BIN_IN[12] = #230000 1'b1;
	BIN_IN[12] = #230000 1'b0;
end 
// BIN_IN[ 11 ]
initial
begin
	BIN_IN[11] = 1'b0;
	BIN_IN[11] = #100000 1'b1;
	BIN_IN[11] = #110000 1'b0;
	BIN_IN[11] = #120000 1'b1;
	# 110000;
	repeat(2)
	begin
		BIN_IN[11] = 1'b0;
		BIN_IN[11] = #110000 1'b1;
		# 120000;
	end
	BIN_IN[11] = 1'b0;
end 
// BIN_IN[ 10 ]
initial
begin
	BIN_IN[10] = 1'b0;
	# 40000;
	repeat(2)
	begin
		BIN_IN[10] = 1'b1;
		BIN_IN[10] = #60000 1'b0;
		BIN_IN[10] = #50000 1'b1;
		BIN_IN[10] = #60000 1'b0;
		# 60000;
	end
	BIN_IN[10] = 1'b1;
	BIN_IN[10] = #50000 1'b0;
	BIN_IN[10] = #60000 1'b1;
	BIN_IN[10] = #60000 1'b0;
	BIN_IN[10] = #60000 1'b1;
	BIN_IN[10] = #50000 1'b0;
	BIN_IN[10] = #60000 1'b1;
	BIN_IN[10] = #60000 1'b0;
	BIN_IN[10] = #50000 1'b1;
end 
// BIN_IN[ 9 ]
initial
begin
	BIN_IN[9] = 1'b0;
	# 10000;
	repeat(2)
	begin
		BIN_IN[9] = 1'b1;
		BIN_IN[9] = #30000 1'b0;
		# 30000;
	end
	repeat(2)
	begin
		BIN_IN[9] = 1'b1;
		# 20000;
		repeat(3)
		begin
			BIN_IN[9] = 1'b0;
			BIN_IN[9] = #30000 1'b1;
			# 30000;
		end
		BIN_IN[9] = 1'b0;
		# 20000;
		repeat(3)
		begin
			BIN_IN[9] = 1'b1;
			BIN_IN[9] = #30000 1'b0;
			# 30000;
		end
	end
	BIN_IN[9] = 1'b1;
	BIN_IN[9] = #20000 1'b0;
	BIN_IN[9] = #30000 1'b1;
end 
// BIN_IN[ 8 ]
initial
begin
	BIN_IN[8] = 1'b1;
	# 10000;
	repeat(4)
	begin
		BIN_IN[8] = 1'b0;
		BIN_IN[8] = #10000 1'b1;
		# 20000;
	end
	repeat(4)
	begin
		BIN_IN[8] = 1'b0;
		# 10000;
		repeat(3)
		begin
			BIN_IN[8] = 1'b1;
			BIN_IN[8] = #10000 1'b0;
			# 20000;
		end
		BIN_IN[8] = 1'b1;
		# 10000;
		repeat(3)
		begin
			BIN_IN[8] = 1'b0;
			BIN_IN[8] = #10000 1'b1;
			# 20000;
		end
	end
	BIN_IN[8] = 1'b0;
	# 10000;
	repeat(2)
	begin
		BIN_IN[8] = 1'b1;
		BIN_IN[8] = #10000 1'b0;
		# 20000;
	end
end 
// BIN_IN[ 7 ]
initial
begin
	repeat(2)
	begin
		BIN_IN[7] = 1'b1;
		BIN_IN[7] = #10000 1'b0;
		# 20000;
	end
	repeat(2)
	begin
		BIN_IN[7] = 1'b1;
		BIN_IN[7] = #20000 1'b0;
		# 10000;
	end
	repeat(8)
	begin
		BIN_IN[7] = 1'b1;
		BIN_IN[7] = #20000 1'b0;
		BIN_IN[7] = #20000 1'b1;
		BIN_IN[7] = #10000 1'b0;
		BIN_IN[7] = #20000 1'b1;
		BIN_IN[7] = #20000 1'b0;
		# 10000;
	end
	BIN_IN[7] = 1'b1;
	# 20000;
	repeat(2)
	begin
		BIN_IN[7] = 1'b0;
		BIN_IN[7] = #20000 1'b1;
		# 10000;
	end
end 
// BIN_IN[ 6 ]
initial
begin
	repeat(2)
	begin
		BIN_IN[6] = 1'b0;
		BIN_IN[6] = #10000 1'b1;
		BIN_IN[6] = #10000 1'b0;
		BIN_IN[6] = #20000 1'b1;
		# 10000;
	end
	repeat(13)
	begin
		BIN_IN[6] = 1'b0;
		BIN_IN[6] = #10000 1'b1;
		BIN_IN[6] = #20000 1'b0;
		BIN_IN[6] = #10000 1'b1;
		# 10000;
	end
	repeat(5)
	begin
		BIN_IN[6] = 1'b0;
		BIN_IN[6] = #20000 1'b1;
		BIN_IN[6] = #10000 1'b0;
		BIN_IN[6] = #10000 1'b1;
		# 10000;
	end
end 
// BIN_IN[ 5 ]
initial
begin
	repeat(2)
	begin
		BIN_IN[5] = 1'b0;
		BIN_IN[5] = #30000 1'b1;
		# 20000;
	end
	repeat(6)
	begin
		BIN_IN[5] = 1'b0;
		BIN_IN[5] = #20000 1'b1;
		# 30000;
	end
	BIN_IN[5] = 1'b0;
	# 20000;
	repeat(6)
	begin
		BIN_IN[5] = 1'b1;
		BIN_IN[5] = #20000 1'b0;
		# 30000;
	end
	BIN_IN[5] = 1'b1;
	# 20000;
	repeat(5)
	begin
		BIN_IN[5] = 1'b0;
		BIN_IN[5] = #20000 1'b1;
		# 30000;
	end
	BIN_IN[5] = 1'b0;
end 
// BIN_IN[ 4 ]
initial
begin
	repeat(2)
	begin
		BIN_IN[4] = 1'b1;
		BIN_IN[4] = #10000 1'b0;
		BIN_IN[4] = #20000 1'b1;
		BIN_IN[4] = #10000 1'b0;
		# 10000;
	end
	repeat(3)
	begin
		BIN_IN[4] = 1'b1;
		BIN_IN[4] = #10000 1'b0;
		BIN_IN[4] = #10000 1'b1;
		BIN_IN[4] = #20000 1'b0;
		# 10000;
	end
	repeat(3)
	begin
		BIN_IN[4] = 1'b1;
		BIN_IN[4] = #10000 1'b0;
		BIN_IN[4] = #10000 1'b1;
		BIN_IN[4] = #10000 1'b0;
		# 20000;
	end
	repeat(2)
	begin
		BIN_IN[4] = 1'b1;
		BIN_IN[4] = #10000 1'b0;
		# 10000;
	end
	repeat(3)
	begin
		BIN_IN[4] = 1'b1;
		BIN_IN[4] = #20000 1'b0;
		BIN_IN[4] = #10000 1'b1;
		BIN_IN[4] = #10000 1'b0;
		# 10000;
	end
	repeat(3)
	begin
		BIN_IN[4] = 1'b1;
		BIN_IN[4] = #10000 1'b0;
		BIN_IN[4] = #20000 1'b1;
		BIN_IN[4] = #10000 1'b0;
		# 10000;
	end
	repeat(3)
	begin
		BIN_IN[4] = 1'b1;
		BIN_IN[4] = #10000 1'b0;
		BIN_IN[4] = #10000 1'b1;
		BIN_IN[4] = #20000 1'b0;
		# 10000;
	end
	repeat(2)
	begin
		BIN_IN[4] = 1'b1;
		BIN_IN[4] = #10000 1'b0;
		BIN_IN[4] = #10000 1'b1;
		BIN_IN[4] = #10000 1'b0;
		# 20000;
	end
	BIN_IN[4] = 1'b1;
end 
// BIN_IN[ 3 ]
initial
begin
	repeat(2)
	begin
		BIN_IN[3] = 1'b1;
		BIN_IN[3] = #20000 1'b0;
		# 30000;
	end
	repeat(5)
	begin
		BIN_IN[3] = 1'b1;
		BIN_IN[3] = #30000 1'b0;
		BIN_IN[3] = #20000 1'b1;
		BIN_IN[3] = #30000 1'b0;
		BIN_IN[3] = #30000 1'b1;
		BIN_IN[3] = #20000 1'b0;
		# 30000;
	end
	repeat(2)
	begin
		BIN_IN[3] = 1'b1;
		BIN_IN[3] = #30000 1'b0;
		# 20000;
	end
end 
// BIN_IN[ 2 ]
initial
begin
	BIN_IN[2] = 1'b0;
	# 10000;
	repeat(12)
	begin
		BIN_IN[2] = 1'b1;
		BIN_IN[2] = #10000 1'b0;
		BIN_IN[2] = #10000 1'b1;
		BIN_IN[2] = #20000 1'b0;
		BIN_IN[2] = #10000 1'b1;
		BIN_IN[2] = #10000 1'b0;
		# 20000;
	end
	BIN_IN[2] = 1'b1;
	BIN_IN[2] = #10000 1'b0;
	BIN_IN[2] = #10000 1'b1;
end 
// BIN_IN[ 1 ]
always
begin
	BIN_IN[1] = 1'b1;
	BIN_IN[1] = #20000 1'b0;
	#20000;
end 
// BIN_IN[ 0 ]
always
begin
	BIN_IN[0] = 1'b1;
	BIN_IN[0] = #10000 1'b0;
	#10000;
end 
endmodule

