// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/18/2022 10:07:20"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CALCULATOR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CALCULATOR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ADC_CLK_10;
reg [1:0] KEY;
reg [9:0] SW;
// wires                                               
wire [9:0] LEDR;
wire [15:0] from_A;
wire [15:0] from_B;
wire [15:0] mod;
wire [15:0] res;
wire [15:0] to_seg;

// assign statements (if any)                          
CALCULATOR i1 (
// port map - connection between master ports and signals/registers   
	.ADC_CLK_10(ADC_CLK_10),
	.KEY(KEY),
	.LEDR(LEDR),
	.SW(SW),
	.from_A(from_A),
	.from_B(from_B),
	.mod(mod),
	.res(res),
	.to_seg(to_seg)
);
initial 
begin 
#1000000 $finish;
end 

// KEY[0]
initial
begin
	repeat(68)
	begin
		KEY[0] = 1'b0;
		KEY[0] = #5000 1'b1;
		# 5000;
	end
	KEY[0] = 1'b0;
	KEY[0] = #5000 1'b1;
end 

// KEY[1]
initial
begin
	KEY[1] = 1'b0;
	KEY[1] = #10000 1'b1;
end 

// SW[9]
initial
begin
	SW[9] = 1'b0;
	SW[9] = #700000 1'b1;
end 

// SW[8]
initial
begin
	SW[8] = 1'b0;
	SW[8] = #370000 1'b1;
	SW[8] = #330000 1'b0;
end 

// SW[7]
initial
begin
	SW[7] = 1'b0;
	SW[7] = #740000 1'b1;
	# 40000;
	repeat(2)
	begin
		SW[7] = 1'b0;
		SW[7] = #40000 1'b1;
		# 40000;
	end
	SW[7] = 1'b0;
	SW[7] = #40000 1'b1;
end 

// SW[6]
initial
begin
	SW[6] = 1'b0;
	SW[6] = #720000 1'b1;
	# 20000;
	repeat(6)
	begin
		SW[6] = 1'b0;
		SW[6] = #20000 1'b1;
		# 20000;
	end
	SW[6] = 1'b0;
end 

// SW[5]
initial
begin
	SW[5] = 1'b0;
	SW[5] = #710000 1'b1;
	# 10000;
	repeat(14)
	begin
		SW[5] = 1'b0;
		SW[5] = #10000 1'b1;
		# 10000;
	end
end 

// SW[4]
initial
begin
	SW[4] = 1'b0;
	SW[4] = #330000 1'b1;
	SW[4] = #10000 1'b0;
	SW[4] = #320000 1'b1;
	SW[4] = #20000 1'b0;
end 

// SW[3]
initial
begin
	SW[3] = 1'b0;
	SW[3] = #310000 1'b1;
	SW[3] = #60000 1'b0;
end 

// SW[2]
initial
begin
	SW[2] = 1'b0;
	SW[2] = #170000 1'b1;
	SW[2] = #140000 1'b0;
end 

// SW[1]
initial
begin
	SW[1] = 1'b0;
	SW[1] = #70000 1'b1;
	SW[1] = #100000 1'b0;
end 

// SW[0]
initial
begin
	SW[0] = 1'b0;
	SW[0] = #10000 1'b1;
	SW[0] = #60000 1'b0;
	SW[0] = #300000 1'b1;
	SW[0] = #70000 1'b0;
end 

// ADC_CLK_10
always
begin
	ADC_CLK_10 = 1'b0;
	ADC_CLK_10 = #2500 1'b1;
	#2500;
end 
endmodule

