// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/17/2022 19:58:03"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DIVIDER_LL
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DIVIDER_LL_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] A;
reg [31:0] B;
reg Sign_a;
reg Sign_b;
reg Zero_a;
reg Zero_b;
reg [31:0] b_map;
// wires                                               
wire [31:0] D;
wire [31:0] Modul;
wire Over;
wire Turn;

// assign statements (if any)                          
DIVIDER_LL i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.D(D),
	.Modul(Modul),
	.Over(Over),
	.Sign_a(Sign_a),
	.Sign_b(Sign_b),
	.Turn(Turn),
	.Zero_a(Zero_a),
	.Zero_b(Zero_b),
	.b_map(b_map)
);
initial 
begin 
#1000000 $finish;
end 
// A[ 31 ]
initial
begin
	A[31] = 1'b0;
end 
// A[ 30 ]
initial
begin
	A[30] = 1'b0;
end 
// A[ 29 ]
initial
begin
	A[29] = 1'b0;
end 
// A[ 28 ]
initial
begin
	A[28] = 1'b0;
end 
// A[ 27 ]
initial
begin
	A[27] = 1'b0;
end 
// A[ 26 ]
initial
begin
	A[26] = 1'b0;
end 
// A[ 25 ]
initial
begin
	A[25] = 1'b0;
end 
// A[ 24 ]
initial
begin
	A[24] = 1'b0;
end 
// A[ 23 ]
initial
begin
	A[23] = 1'b0;
end 
// A[ 22 ]
initial
begin
	A[22] = 1'b0;
end 
// A[ 21 ]
initial
begin
	A[21] = 1'b0;
end 
// A[ 20 ]
initial
begin
	A[20] = 1'b0;
end 
// A[ 19 ]
initial
begin
	A[19] = 1'b0;
end 
// A[ 18 ]
initial
begin
	A[18] = 1'b0;
end 
// A[ 17 ]
initial
begin
	A[17] = 1'b0;
end 
// A[ 16 ]
initial
begin
	A[16] = 1'b0;
end 
// A[ 15 ]
initial
begin
	A[15] = 1'b0;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b0;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b0;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b0;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b0;
	A[10] = #940000 1'b1;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
	A[9] = #470000 1'b1;
	A[9] = #470000 1'b0;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b0;
	A[8] = #240000 1'b1;
	A[8] = #230000 1'b0;
	A[8] = #230000 1'b1;
	A[8] = #240000 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
	A[7] = #120000 1'b1;
	A[7] = #120000 1'b0;
	A[7] = #110000 1'b1;
	A[7] = #120000 1'b0;
	A[7] = #120000 1'b1;
	A[7] = #110000 1'b0;
	A[7] = #120000 1'b1;
	A[7] = #120000 1'b0;
end 
// A[ 6 ]
initial
begin
	repeat(2)
	begin
		A[6] = 1'b0;
		A[6] = #60000 1'b1;
		# 60000;
	end
	A[6] = 1'b0;
	A[6] = #60000 1'b1;
	# 50000;
	repeat(2)
	begin
		A[6] = 1'b0;
		A[6] = #60000 1'b1;
		# 60000;
	end
	A[6] = 1'b0;
	# 50000;
	repeat(2)
	begin
		A[6] = 1'b1;
		A[6] = #60000 1'b0;
		# 60000;
	end
	A[6] = 1'b1;
	A[6] = #60000 1'b0;
	A[6] = #50000 1'b1;
end 
// A[ 5 ]
initial
begin
	repeat(5)
	begin
		A[5] = 1'b0;
		A[5] = #30000 1'b1;
		# 30000;
	end
	A[5] = 1'b0;
	# 20000;
	repeat(5)
	begin
		A[5] = 1'b1;
		A[5] = #30000 1'b0;
		# 30000;
	end
	A[5] = 1'b1;
	# 20000;
	repeat(5)
	begin
		A[5] = 1'b0;
		A[5] = #30000 1'b1;
		# 30000;
	end
	A[5] = 1'b0;
	A[5] = #20000 1'b1;
	A[5] = #30000 1'b0;
end 
// A[ 4 ]
initial
begin
	repeat(5)
	begin
		A[4] = 1'b0;
		A[4] = #20000 1'b1;
		# 10000;
	end
	repeat(2)
	begin
		repeat(5)
		begin
			A[4] = 1'b0;
			A[4] = #10000 1'b1;
			# 20000;
		end
		A[4] = 1'b0;
		# 10000;
		repeat(5)
		begin
			A[4] = 1'b1;
			A[4] = #10000 1'b0;
			# 20000;
		end
		A[4] = 1'b1;
		# 10000;
	end
	repeat(5)
	begin
		A[4] = 1'b0;
		A[4] = #10000 1'b1;
		# 20000;
	end
	A[4] = 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #10000 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
	# 10000;
	repeat(2)
	begin
		A[3] = 1'b1;
		A[3] = #10000 1'b0;
		# 20000;
	end
	repeat(4)
	begin
		repeat(2)
		begin
			A[3] = 1'b1;
			A[3] = #20000 1'b0;
			# 10000;
		end
		A[3] = 1'b1;
		# 20000;
		repeat(2)
		begin
			A[3] = 1'b0;
			A[3] = #20000 1'b1;
			# 10000;
		end
		A[3] = 1'b0;
		# 20000;
	end
	repeat(2)
	begin
		A[3] = 1'b1;
		A[3] = #20000 1'b0;
		# 10000;
	end
	A[3] = 1'b1;
	# 20000;
	repeat(2)
	begin
		A[3] = 1'b0;
		A[3] = #20000 1'b1;
		# 10000;
	end
	A[3] = 1'b0;
	# 20000;
	repeat(2)
	begin
		A[3] = 1'b1;
		A[3] = #20000 1'b0;
		# 10000;
	end
	A[3] = 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #10000 1'b0;
end 
// A[ 2 ]
initial
begin
	repeat(12)
	begin
		A[2] = 1'b0;
		A[2] = #20000 1'b1;
		A[2] = #10000 1'b0;
		A[2] = #10000 1'b1;
		A[2] = #20000 1'b0;
		A[2] = #10000 1'b1;
		# 10000;
	end
	A[2] = 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #10000 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
	# 10000;
	repeat(24)
	begin
		A[1] = 1'b1;
		A[1] = #20000 1'b0;
		# 20000;
	end
	A[1] = 1'b1;
	A[1] = #20000 1'b0;
end 
// A[ 0 ]
always
begin
	A[0] = 1'b0;
	A[0] = #10000 1'b1;
	#10000;
end 
// B[ 31 ]
initial
begin
	B[31] = 1'b1;
end 
// B[ 30 ]
initial
begin
	B[30] = 1'b1;
end 
// B[ 29 ]
initial
begin
	B[29] = 1'b1;
end 
// B[ 28 ]
initial
begin
	B[28] = 1'b1;
end 
// B[ 27 ]
initial
begin
	B[27] = 1'b1;
end 
// B[ 26 ]
initial
begin
	B[26] = 1'b1;
end 
// B[ 25 ]
initial
begin
	B[25] = 1'b1;
end 
// B[ 24 ]
initial
begin
	B[24] = 1'b1;
end 
// B[ 23 ]
initial
begin
	B[23] = 1'b1;
end 
// B[ 22 ]
initial
begin
	B[22] = 1'b1;
end 
// B[ 21 ]
initial
begin
	B[21] = 1'b1;
end 
// B[ 20 ]
initial
begin
	B[20] = 1'b1;
end 
// B[ 19 ]
initial
begin
	B[19] = 1'b1;
end 
// B[ 18 ]
initial
begin
	B[18] = 1'b1;
end 
// B[ 17 ]
initial
begin
	B[17] = 1'b1;
end 
// B[ 16 ]
initial
begin
	B[16] = 1'b1;
end 
// B[ 15 ]
initial
begin
	B[15] = 1'b1;
end 
// B[ 14 ]
initial
begin
	B[14] = 1'b1;
end 
// B[ 13 ]
initial
begin
	B[13] = 1'b1;
end 
// B[ 12 ]
initial
begin
	B[12] = 1'b1;
end 
// B[ 11 ]
initial
begin
	B[11] = 1'b1;
end 
// B[ 10 ]
initial
begin
	B[10] = 1'b1;
end 
// B[ 9 ]
initial
begin
	B[9] = 1'b1;
end 
// B[ 8 ]
initial
begin
	B[8] = 1'b1;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b1;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b1;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b1;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 

// Sign_a
always
begin
	Sign_a = 1'b0;
	Sign_a = #2500 1'b1;
	#2500;
end 

// Sign_b
always
begin
	Sign_b = 1'b0;
	Sign_b = #1000 1'b1;
	#1000;
end 

// Zero_a
initial
begin
	Zero_a = 1'b0;
end 

// Zero_b
initial
begin
	Zero_b = 1'b0;
end 
// b_map[ 31 ]
initial
begin
	b_map[31] = 1'b0;
end 
// b_map[ 30 ]
initial
begin
	b_map[30] = 1'b0;
end 
// b_map[ 29 ]
initial
begin
	b_map[29] = 1'b0;
end 
// b_map[ 28 ]
initial
begin
	b_map[28] = 1'b0;
end 
// b_map[ 27 ]
initial
begin
	b_map[27] = 1'b0;
end 
// b_map[ 26 ]
initial
begin
	b_map[26] = 1'b0;
end 
// b_map[ 25 ]
initial
begin
	b_map[25] = 1'b0;
end 
// b_map[ 24 ]
initial
begin
	b_map[24] = 1'b0;
end 
// b_map[ 23 ]
initial
begin
	b_map[23] = 1'b0;
end 
// b_map[ 22 ]
initial
begin
	b_map[22] = 1'b0;
end 
// b_map[ 21 ]
initial
begin
	b_map[21] = 1'b0;
end 
// b_map[ 20 ]
initial
begin
	b_map[20] = 1'b0;
end 
// b_map[ 19 ]
initial
begin
	b_map[19] = 1'b0;
end 
// b_map[ 18 ]
initial
begin
	b_map[18] = 1'b0;
end 
// b_map[ 17 ]
initial
begin
	b_map[17] = 1'b0;
end 
// b_map[ 16 ]
initial
begin
	b_map[16] = 1'b0;
end 
// b_map[ 15 ]
initial
begin
	b_map[15] = 1'b0;
end 
// b_map[ 14 ]
initial
begin
	b_map[14] = 1'b0;
end 
// b_map[ 13 ]
initial
begin
	b_map[13] = 1'b0;
end 
// b_map[ 12 ]
initial
begin
	b_map[12] = 1'b0;
end 
// b_map[ 11 ]
initial
begin
	b_map[11] = 1'b0;
end 
// b_map[ 10 ]
initial
begin
	b_map[10] = 1'b0;
end 
// b_map[ 9 ]
initial
begin
	b_map[9] = 1'b0;
end 
// b_map[ 8 ]
initial
begin
	b_map[8] = 1'b0;
end 
// b_map[ 7 ]
initial
begin
	b_map[7] = 1'b0;
end 
// b_map[ 6 ]
initial
begin
	b_map[6] = 1'b0;
end 
// b_map[ 5 ]
initial
begin
	b_map[5] = 1'b0;
end 
// b_map[ 4 ]
initial
begin
	b_map[4] = 1'b0;
end 
// b_map[ 3 ]
initial
begin
	b_map[3] = 1'b0;
end 
// b_map[ 2 ]
initial
begin
	b_map[2] = 1'b1;
end 
// b_map[ 1 ]
initial
begin
	b_map[1] = 1'b1;
end 
// b_map[ 0 ]
initial
begin
	b_map[0] = 1'b1;
end 
endmodule

