// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/17/2022 08:57:27"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DIVIDER_LL
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DIVIDER_LL_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg Sign_a;
reg Sign_b;
reg Zero_a;
reg Zero_b;
reg [7:0] b_map;
// wires                                               
wire [7:0] D;
wire [7:0] Modul;
wire Over;
wire Turn;

// assign statements (if any)                          
DIVIDER_LL i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.D(D),
	.Modul(Modul),
	.Over(Over),
	.Sign_a(Sign_a),
	.Sign_b(Sign_b),
	.Turn(Turn),
	.Zero_a(Zero_a),
	.Zero_b(Zero_b),
	.b_map(b_map)
);
initial 
begin 
#1000000 $finish;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
	A[6] = #640000 1'b1;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
	A[5] = #320000 1'b1;
	A[5] = #320000 1'b0;
	A[5] = #320000 1'b1;
end 
// A[ 4 ]
initial
begin
	repeat(3)
	begin
		A[4] = 1'b0;
		A[4] = #160000 1'b1;
		# 160000;
	end
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	repeat(6)
	begin
		A[3] = 1'b0;
		A[3] = #80000 1'b1;
		# 80000;
	end
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	repeat(12)
	begin
		A[2] = 1'b0;
		A[2] = #40000 1'b1;
		# 40000;
	end
	A[2] = 1'b0;
end 
// A[ 1 ]
always
begin
	A[1] = 1'b0;
	A[1] = #20000 1'b1;
	#20000;
end 
// A[ 0 ]
always
begin
	A[0] = 1'b0;
	A[0] = #10000 1'b1;
	#10000;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b1;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b1;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b1;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 

// Sign_a
initial
begin
	Sign_a = 1'b0;
end 

// Sign_b
always
begin
	Sign_b = 1'b0;
	Sign_b = #2500 1'b1;
	#2500;
end 

// Zero_a
initial
begin
	Zero_a = 1'b0;
end 

// Zero_b
initial
begin
	Zero_b = 1'b0;
end 
// b_map[ 7 ]
initial
begin
	b_map[7] = 1'b0;
end 
// b_map[ 6 ]
initial
begin
	b_map[6] = 1'b0;
end 
// b_map[ 5 ]
initial
begin
	b_map[5] = 1'b0;
end 
// b_map[ 4 ]
initial
begin
	b_map[4] = 1'b0;
end 
// b_map[ 3 ]
initial
begin
	b_map[3] = 1'b0;
end 
// b_map[ 2 ]
initial
begin
	b_map[2] = 1'b0;
end 
// b_map[ 1 ]
initial
begin
	b_map[1] = 1'b1;
end 
// b_map[ 0 ]
initial
begin
	b_map[0] = 1'b1;
end 
endmodule

