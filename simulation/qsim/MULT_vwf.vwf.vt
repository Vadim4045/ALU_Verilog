// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/17/2022 09:50:35"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          MULTIPLAYER_LL
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MULTIPLAYER_LL_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] A;
reg [15:0] B;
reg Sign_a;
reg Sign_b;
reg [15:0] a_map;
// wires                                               
wire [15:0] M;
wire Over;
wire Turn;

// assign statements (if any)                          
MULTIPLAYER_LL i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.M(M),
	.Over(Over),
	.Sign_a(Sign_a),
	.Sign_b(Sign_b),
	.Turn(Turn),
	.a_map(a_map)
);
initial 
begin 
#1000000 $finish;
end 
// A[ 15 ]
initial
begin
	A[15] = 1'b0;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b0;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b0;
	A[12] = #960000 1'b1;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b0;
	A[11] = #480000 1'b1;
	A[11] = #480000 1'b0;
end 
// A[ 10 ]
initial
begin
	repeat(2)
	begin
		A[10] = 1'b0;
		A[10] = #240000 1'b1;
		# 240000;
	end
	A[10] = 1'b0;
end 
// A[ 9 ]
initial
begin
	repeat(4)
	begin
		A[9] = 1'b0;
		A[9] = #120000 1'b1;
		# 120000;
	end
	A[9] = 1'b0;
end 
// A[ 8 ]
initial
begin
	repeat(8)
	begin
		A[8] = 1'b0;
		A[8] = #60000 1'b1;
		# 60000;
	end
	A[8] = 1'b0;
end 
// A[ 7 ]
initial
begin
	repeat(9)
	begin
		A[7] = 1'b0;
		A[7] = #40000 1'b1;
		# 20000;
	end
	repeat(7)
	begin
		A[7] = 1'b0;
		A[7] = #20000 1'b1;
		# 40000;
	end
	A[7] = 1'b0;
	A[7] = #20000 1'b1;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
	# 20000;
	repeat(4)
	begin
		A[6] = 1'b1;
		A[6] = #20000 1'b0;
		# 40000;
	end
	repeat(4)
	begin
		A[6] = 1'b1;
		A[6] = #40000 1'b0;
		# 20000;
	end
	A[6] = 1'b1;
	# 40000;
	repeat(3)
	begin
		A[6] = 1'b0;
		A[6] = #40000 1'b1;
		# 20000;
	end
	A[6] = 1'b0;
	# 40000;
	repeat(4)
	begin
		A[6] = 1'b1;
		A[6] = #40000 1'b0;
		# 20000;
	end
end 
// A[ 5 ]
initial
begin
	repeat(2)
	begin
		A[5] = 1'b0;
		A[5] = #40000 1'b1;
		# 20000;
	end
	repeat(2)
	begin
		A[5] = 1'b0;
		A[5] = #20000 1'b1;
		# 40000;
	end
	A[5] = 1'b0;
	# 20000;
	repeat(2)
	begin
		A[5] = 1'b1;
		A[5] = #20000 1'b0;
		# 40000;
	end
	repeat(2)
	begin
		A[5] = 1'b1;
		# 20000;
		repeat(2)
		begin
			A[5] = 1'b0;
			A[5] = #20000 1'b1;
			# 40000;
		end
		A[5] = 1'b0;
		A[5] = #20000 1'b1;
		A[5] = #20000 1'b0;
		# 40000;
	end
	A[5] = 1'b1;
	A[5] = #20000 1'b0;
	A[5] = #40000 1'b1;
	A[5] = #20000 1'b0;
	A[5] = #20000 1'b1;
	A[5] = #40000 1'b0;
	A[5] = #20000 1'b1;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
	# 20000;
	repeat(2)
	begin
		A[4] = 1'b1;
		A[4] = #20000 1'b0;
		A[4] = #40000 1'b1;
		A[4] = #40000 1'b0;
		# 40000;
	end
	repeat(2)
	begin
		A[4] = 1'b1;
		A[4] = #40000 1'b0;
		A[4] = #20000 1'b1;
		A[4] = #40000 1'b0;
		# 40000;
	end
	repeat(2)
	begin
		A[4] = 1'b1;
		A[4] = #40000 1'b0;
		A[4] = #40000 1'b1;
		A[4] = #20000 1'b0;
		# 40000;
	end
	A[4] = 1'b1;
	A[4] = #40000 1'b0;
	A[4] = #40000 1'b1;
	A[4] = #40000 1'b0;
end 
// A[ 3 ]
initial
begin
	repeat(2)
	begin
		A[3] = 1'b0;
		# 40000;
		repeat(3)
		begin
			A[3] = 1'b1;
			A[3] = #20000 1'b0;
			# 20000;
		end
		A[3] = 1'b1;
		# 40000;
		repeat(3)
		begin
			A[3] = 1'b0;
			A[3] = #20000 1'b1;
			# 20000;
		end
	end
	A[3] = 1'b0;
	# 40000;
	repeat(3)
	begin
		A[3] = 1'b1;
		A[3] = #20000 1'b0;
		# 20000;
	end
	A[3] = 1'b1;
	# 40000;
	repeat(3)
	begin
		A[3] = 1'b0;
		A[3] = #20000 1'b1;
		# 20000;
	end
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
	# 20000;
	repeat(6)
	begin
		A[2] = 1'b1;
		A[2] = #80000 1'b0;
		# 80000;
	end
	A[2] = 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
	# 20000;
	repeat(12)
	begin
		A[1] = 1'b1;
		A[1] = #40000 1'b0;
		# 40000;
	end
	A[1] = 1'b1;
end 
// A[ 0 ]
always
begin
	A[0] = 1'b0;
	A[0] = #20000 1'b1;
	#20000;
end 
// B[ 15 ]
initial
begin
	B[15] = 1'b0;
end 
// B[ 14 ]
initial
begin
	B[14] = 1'b0;
end 
// B[ 13 ]
initial
begin
	B[13] = 1'b0;
end 
// B[ 12 ]
initial
begin
	B[12] = 1'b0;
end 
// B[ 11 ]
initial
begin
	B[11] = 1'b0;
end 
// B[ 10 ]
initial
begin
	B[10] = 1'b0;
end 
// B[ 9 ]
initial
begin
	B[9] = 1'b0;
end 
// B[ 8 ]
initial
begin
	B[8] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 

// Sign_a
always
begin
	Sign_a = 1'b0;
	Sign_a = #5000 1'b1;
	#5000;
end 

// Sign_b
always
begin
	Sign_b = 1'b0;
	Sign_b = #2500 1'b1;
	#2500;
end 
// a_map[ 15 ]
initial
begin
	a_map[15] = 1'b0;
end 
// a_map[ 14 ]
initial
begin
	a_map[14] = 1'b0;
end 
// a_map[ 13 ]
initial
begin
	a_map[13] = 1'b0;
end 
// a_map[ 12 ]
initial
begin
	a_map[12] = 1'b0;
	a_map[12] = #960000 1'b1;
end 
// a_map[ 11 ]
initial
begin
	a_map[11] = 1'b0;
	a_map[11] = #480000 1'b1;
	a_map[11] = #480000 1'b0;
end 
// a_map[ 10 ]
initial
begin
	repeat(2)
	begin
		a_map[10] = 1'b0;
		a_map[10] = #240000 1'b1;
		# 240000;
	end
	a_map[10] = 1'b0;
end 
// a_map[ 9 ]
initial
begin
	repeat(4)
	begin
		a_map[9] = 1'b0;
		a_map[9] = #120000 1'b1;
		# 120000;
	end
	a_map[9] = 1'b0;
end 
// a_map[ 8 ]
initial
begin
	repeat(8)
	begin
		a_map[8] = 1'b0;
		a_map[8] = #60000 1'b1;
		# 60000;
	end
	a_map[8] = 1'b0;
end 
// a_map[ 7 ]
initial
begin
	repeat(9)
	begin
		a_map[7] = 1'b0;
		a_map[7] = #40000 1'b1;
		# 20000;
	end
	repeat(7)
	begin
		a_map[7] = 1'b0;
		a_map[7] = #20000 1'b1;
		# 40000;
	end
	a_map[7] = 1'b0;
	a_map[7] = #20000 1'b1;
end 
// a_map[ 6 ]
initial
begin
	a_map[6] = 1'b0;
	# 20000;
	repeat(4)
	begin
		a_map[6] = 1'b1;
		a_map[6] = #20000 1'b0;
		# 40000;
	end
	repeat(4)
	begin
		a_map[6] = 1'b1;
		a_map[6] = #40000 1'b0;
		# 20000;
	end
	a_map[6] = 1'b1;
	# 40000;
	repeat(3)
	begin
		a_map[6] = 1'b0;
		a_map[6] = #40000 1'b1;
		# 20000;
	end
	a_map[6] = 1'b0;
	# 40000;
	repeat(4)
	begin
		a_map[6] = 1'b1;
		a_map[6] = #40000 1'b0;
		# 20000;
	end
end 
// a_map[ 5 ]
initial
begin
	repeat(2)
	begin
		a_map[5] = 1'b0;
		a_map[5] = #40000 1'b1;
		# 20000;
	end
	repeat(2)
	begin
		a_map[5] = 1'b0;
		a_map[5] = #20000 1'b1;
		# 40000;
	end
	a_map[5] = 1'b0;
	# 20000;
	repeat(2)
	begin
		a_map[5] = 1'b1;
		a_map[5] = #20000 1'b0;
		# 40000;
	end
	repeat(2)
	begin
		a_map[5] = 1'b1;
		# 20000;
		repeat(2)
		begin
			a_map[5] = 1'b0;
			a_map[5] = #20000 1'b1;
			# 40000;
		end
		a_map[5] = 1'b0;
		a_map[5] = #20000 1'b1;
		a_map[5] = #20000 1'b0;
		# 40000;
	end
	a_map[5] = 1'b1;
	a_map[5] = #20000 1'b0;
	a_map[5] = #40000 1'b1;
	a_map[5] = #20000 1'b0;
	a_map[5] = #20000 1'b1;
	a_map[5] = #40000 1'b0;
	a_map[5] = #20000 1'b1;
end 
// a_map[ 4 ]
initial
begin
	a_map[4] = 1'b0;
	# 20000;
	repeat(2)
	begin
		a_map[4] = 1'b1;
		a_map[4] = #20000 1'b0;
		a_map[4] = #40000 1'b1;
		a_map[4] = #40000 1'b0;
		# 40000;
	end
	repeat(2)
	begin
		a_map[4] = 1'b1;
		a_map[4] = #40000 1'b0;
		a_map[4] = #20000 1'b1;
		a_map[4] = #40000 1'b0;
		# 40000;
	end
	repeat(2)
	begin
		a_map[4] = 1'b1;
		a_map[4] = #40000 1'b0;
		a_map[4] = #40000 1'b1;
		a_map[4] = #20000 1'b0;
		# 40000;
	end
	a_map[4] = 1'b1;
	a_map[4] = #40000 1'b0;
	a_map[4] = #40000 1'b1;
	a_map[4] = #40000 1'b0;
end 
// a_map[ 3 ]
initial
begin
	repeat(2)
	begin
		a_map[3] = 1'b0;
		# 40000;
		repeat(3)
		begin
			a_map[3] = 1'b1;
			a_map[3] = #20000 1'b0;
			# 20000;
		end
		a_map[3] = 1'b1;
		# 40000;
		repeat(3)
		begin
			a_map[3] = 1'b0;
			a_map[3] = #20000 1'b1;
			# 20000;
		end
	end
	a_map[3] = 1'b0;
	# 40000;
	repeat(3)
	begin
		a_map[3] = 1'b1;
		a_map[3] = #20000 1'b0;
		# 20000;
	end
	a_map[3] = 1'b1;
	# 40000;
	repeat(3)
	begin
		a_map[3] = 1'b0;
		a_map[3] = #20000 1'b1;
		# 20000;
	end
	a_map[3] = 1'b0;
end 
// a_map[ 2 ]
initial
begin
	a_map[2] = 1'b0;
	# 20000;
	repeat(6)
	begin
		a_map[2] = 1'b1;
		a_map[2] = #80000 1'b0;
		# 80000;
	end
	a_map[2] = 1'b1;
end 
// a_map[ 1 ]
initial
begin
	a_map[1] = 1'b0;
	# 20000;
	repeat(12)
	begin
		a_map[1] = 1'b1;
		a_map[1] = #40000 1'b0;
		# 40000;
	end
	a_map[1] = 1'b1;
end 
// a_map[ 0 ]
always
begin
	a_map[0] = 1'b0;
	a_map[0] = #20000 1'b1;
	#20000;
end 
endmodule

